{"version":3,"sources":["Home.js","CodeSnippet.js","reactExamples/UseStateExample.js","reactExamples/JSXExample.js","reactExamples/ListExample.js","reactExamples/UseEffectExample.js","reactExamples/UseReducerExample.js","ReactExamples.js","VanillaJSExamples.js","GitExamples.js","JSRegexExamples.js","App.js","reportWebVitals.js","index.js"],"names":["Home","CodeSnippet","props","language","style","atomOneDark","codeSnippet","UseStateExample","href","JSXStateExample","ListExample","UseEffectExample","UseReducerExample","ReactExamples","className","JSXExample","VanillaJSExamples","GitExamples","JSRegexExamples","App","Container","Navbar","bg","variant","Brand","Nav","Link","to","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2d1884ef.chunk.js","sourcesContent":["const Home = () => {\n  return (\n    <>\n      <h3>Home</h3>\n      <hr />\n      <h3>What are side effects?</h3>\n      <p>As you read through the React docs, you may have stumbled upon the term \"side effect\". Its a concept that's not specific to React.</p>\n      <p>A side effect is when a function modifies something outside its scope.</p>\n      <p>If a function isn't deterministic, it has side effects.</p>\n      <p>When a function depends on order of operation, it has side effects.</p>\n      <p>Examples of side effects include modifying a non-local variable, DOM manipulation, I/O streams, and API calls.</p>\n      <p>Functions with side effects are opposite of pure functions. For a given input, pure functions always return the same output.</p>\n      <p>Sid effects are not easily visible. If there's a bug, it may be hard to track. If testing is involved, extra hoops may have to be jumped through. </p>\n      <p>In this case, simple is better.</p>\n      <p>Don't forget the infamous acronym KISS. Keep it simple stupid. ;)</p>\n    </>\n  );\n};\n\nexport default Home;\n","import SyntaxHighlighter from \"react-syntax-highlighter\";\nimport { atomOneDark } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\n\nconst CodeSnippet = (props) => {\n    return (\n        <>\n            <SyntaxHighlighter language=\"javascript\" style={atomOneDark}>\n                {props.codeSnippet}\n            </SyntaxHighlighter>\n        </>\n    );\n}\n\nexport default CodeSnippet;","import CodeSnippet from \"../CodeSnippet\";\n\nconst UseStateExample = () => {\n  const codeSnippet = `\n        const App = () => {\n            // the initial state is passed in as an argument\n            // useState() returns the current state and a function that updates it\n            const [count, setCount] = useState(0);\n\n            const handleClick = () => {\n                setCounter(count + 1);\n            };\n\n            return (\n                <div>\n                    <div>{count}</div>\n                    <button onClick={handleClick}>Increment</button>\n                </div>\n            );\n        };\n    `;\n\n  return (\n    <>\n      <p>\n        <a href=\"https://reactjs.org/docs/hooks-state.html\">useState()</a>\n      </p>\n      <CodeSnippet codeSnippet={codeSnippet} />\n    </>\n  );\n};\n\nexport default UseStateExample;\n","import CodeSnippet from \"../CodeSnippet\";\n\nconst JSXStateExample = () => {\n  const codeSnippet = `\n    <div\n      style={{\n        paddingTop: 20,\n        width: 500,\n      }}\n    >\n      <div className=\"title\">Title</div>\n    </div>;\n  `;\n\n  return (\n    <div>\n      <p>\n        <a href=\"https://reactjs.org/docs/introducing-jsx.html\">\n          JSX: style and className\n        </a>\n      </p>\n      <CodeSnippet codeSnippet={codeSnippet} />\n    </div>\n  );\n};\n\nexport default JSXStateExample;\n","import CodeSnippet from \"../CodeSnippet\";\n\nconst ListExample = () => {\n  const codeSnippet = `\n      // key must be unique, avoid using the index of map\n      <ol>\n        {list.map((item) => (\n          <li key={item.id}>{item.name}</li>\n        ))}\n      </ol>\n    `;\n\n  return (\n    <>\n      <p>\n        <a href=\"https://reactjs.org/docs/lists-and-keys.html\">Lists</a>\n      </p>\n      <CodeSnippet codeSnippet={codeSnippet} />\n    </>\n  );\n};\n\nexport default ListExample;\n","import CodeSnippet from \"../CodeSnippet\";\n\nconst UseEffectExample = () => {\n  const codeSnippet = `\n      // Passing an empty array as the second argument runs the effect only once\n      useEffect(() => {\n          fetch('http://example.com/random-movie.json')\n              .then(response => response.json())\n              .then(data => setMovie(data));\n      }, []);\n    `;\n\n  return (\n    <>\n      <p>\n        <a href=\"https://reactjs.org/docs/hooks-effect.html\">UseEffect()</a>\n      </p>\n      <CodeSnippet codeSnippet={codeSnippet} />\n    </>\n  );\n};\n\nexport default UseEffectExample;\n","import CodeSnippet from \"../CodeSnippet\";\n\nconst UseReducerExample = () => {\n    const codeSnippet = `\n        const initialState = { count: 0 }\n\n        function reducer(state, action) {\n            switch (action.type) {\n            case \"increment\":\n                return { count: state.count + 1 };\n            case \"decrement\":\n                return { count: state.count - 1 };\n            default:\n                throw new Error();\n            }\n        }\n        \n        const App = () => {\n            const [state, dispatch] = useReducer(reducer, initialState);\n        \n            return (\n            <div>\n                <div>{state.count}</div>\n                <button onClick={() => dispatch({type: \"increment\"})}>increment</button>\n                <button onClick={() => dispatch({type: \"decrement\"})}>decrement</button>\n            </div>\n            );\n        };\n    `;\n\n  return (\n    <>\n      <p>\n        <a href=\"https://reactjs.org/docs/hooks-reference.html#usereducer\">useReducer()</a>\n      </p>\n      <CodeSnippet codeSnippet={codeSnippet} />\n    </>\n  );\n};\n\nexport default UseReducerExample;\n","import UseStateExample from \"./reactExamples/UseStateExample.js\";\nimport JSXExample from \"./reactExamples/JSXExample.js\";\nimport ListExample from \"./reactExamples/ListExample.js\";\nimport UseEffectExample from \"./reactExamples/UseEffectExample.js\";\nimport UseReducerExample from \"./reactExamples/UseReducerExample.js\";\n\nconst ReactExamples = () => {\n  return (\n    <>\n      <h3>React</h3>\n      <p className=\"text-secondary\">\n        React examples and boilerplate.\n      </p>\n      <UseStateExample />\n      <JSXExample />\n      <ListExample />\n      <UseEffectExample />\n      <UseReducerExample />\n    </>\n  );\n};\n\nexport default ReactExamples;\n","import React from \"react\";\n\nconst VanillaJSExamples = () => {\n  return <div>Vanilla JS Examples</div>;\n};\n\nexport default VanillaJSExamples;\n","const GitExamples = () => {\n  return (\n    <>\n        <h1>Git</h1>\n        <p className=\"text-secondary\">Git boilerplate and examples</p>\n        <hr />\n        <h3>How to make a pull request</h3>\n        <p>1. Find a project you want to contribute to. Fork its github repo.</p>\n        <p>2. Clone it to your local system</p>\n        <p><code>git clone https://github.com/*YourUserName*/demo</code></p>\n        <p>3. Make a new branch</p>\n        <p><code>git checkout -b new_branch</code></p>\n        <p>4. Make your changes. Push it back to your repo.</p>\n        <p><code>git add .</code></p>\n        <p><code>git commit -m 'commit message'</code></p>\n        <p><code>git remote, then git push origin 'new_branch'</code></p>\n        <p><code>git remote add upstream https://github.com/*TheirUserName*/demo</code></p>\n        <p>6. Click the \"Compare & pull request\" button in your github repo. Click \"Create pull request\" to open a new pull request.</p>\n    </>\n  );\n};\n\nexport default GitExamples;\n","import CodeSnippet from \"./CodeSnippet\";\n\nconst JSRegexExamples = () => {\n    const codeSnippet1 = `\n        let string = \"Neil Gebhard\";\n        let regex = /Neil/;\n        let result = regex.test(string);\n        // result => true\n    `;\n\n    const codeSnippet2 = `\n        let string = \"Neil has a pet cat.\";\n        let regex = /dog|cat|bird|fish/;\n        let result = regex.test(string);\n        // result => true\n    `;\n\n    const codeSnippet3 = `\n        let myString = \"Neil Gebhard\";\n        let regex = /neil gebhard/i;\n        let result = regex.test(myString);\n        // result => true\n    `;\n\n    const codeSnippet4 = `\n        let str = \"Extract the word 'coding' from this string.\";\n        let regex = /coding/;\n        let result = str.match(regex);\n        // result => ['coding']\n    `;\n\n    const codeSnippet5 = `\n        let str = \"Twinkle, twinkle, little star\";\n        let regex = /twinkle/ig;\n        let result = str.match(regex);\n        // result => [\"Twinkle\", \"twinkle\"]\n    `;\n\n    const codeSnippet6 = `\n        let str = \"Let's have fun with wildcard characters!\";\n        let regex = /.un/;\n        let result = regex.test(str);\n        // result => true\n    `;\n\n    const codeSnippet7 = `\n        let str = \"Match all the vowels in this sentence.\";\n        let regex = /[aeiou]/ig;\n        let result = str.match(regex);\n        // result => [\"a\", \"a\", \"e\", \"o\", \"e\", \"i\", \"i\", \"e\", \"e\", \"e\"]\n    `;\n\n    const codeSnippet8 = `\n        let str = \"The quick brown fox jumps over the lazy dog.\";\n        let regex = /[a-z]/ig;\n        let result = str.match(regex);\n        // result => [\"T\", \"h\", \"e\", \"q\", \"u\", \"i\", \"c\", \"k\", \"b\", \"r\", \"o\", \"w\", \"n\", \"f\", \"o\", \"x\", \"j\", \"u\", \"m\", \"p\", \"s\", \"o\", \"v\", \"e\", \"r\", \"t\", \"h\", \"e\", \"l\", \"a\", \"z\", \"y\", \"d\", \"o\", \"g\"]\n    `;\n\n    const codeSnippet9 = `\n        let str = \"Blueberry 3.141592653s are delicious.\";\n        let regex = /[h-s2-6]/ig;\n        let result = str.match(regex);\n        // result => [\"l\", \"r\", \"r\", \"3\", \"4\", \"5\", \"2\", \"6\", \"5\", \"3\", \"s\", \"r\", \"l\", \"i\", \"i\", \"o\", \"s\"]\n    `;\n\n    const codeSnippet10 = `\n        let str = \"3 blind mice.\";\n        let regex = /[^aeiou0-9]/ig;\n        let result = str.match(regex);\n        // result => [\" \", \"b\", \"l\", \"n\", \"d\", \" \", \"m\", \"c\", \".\"]\n    `;\n\n    const codeSnippet11 = `\n        let str = \"Mississippi\";\n        let regex = /s+/g;\n        let result = str.match(regex);\n        // result => [\"ss\", \"ss\"]\n    `;\n\n    const codeSnippet12 = `\n        let str = \"Aaaaaargh!\"\n        let regex = /Aa*/;\n        let result = str.match(regex);\n        // result => [\"Aaaaaa\"]\n    `;\n\n    const codeSnippet13 = `\n        let str = \"<h1>Lazy match finds the shortest one</h1>\";\n        let regex = /<.*?>/;\n        let result = str.match(regex);\n        // result => [\"<h1>\"]\n    `;\n\n    const codeSnippet14 = `\n        let str = \"Neil loves soccer!\";\n        let regex = /^Neil/;\n        let result = regex.test(str);\n        // result => true  \n    `;\n\n    const codeSnippet15 = `\n        let str = \"Neil loves hiking\";\n        let regex = /hiking$/;\n        let result = regex.test(str);\n        // result => true\n    `;\n\n    const codeSnippet16 = `\n        let str = \"Find the length of this string!\";\n        let regex = /\\\\w/g;\n        let result = str.match(regex).length;\n        // result => 25\n    `;\n\n    const codeSnippet17 = `\n        let str = \"How many are not letters of numbers???\";\n        let regex = /\\\\W/g;\n        let result = str.match(regex).length;\n        // result => 9 (There are 6 spaces)\n    `;\n\n    return (\n      <>\n          <h1>Javascript Regular expressions</h1>\n          <p className=\"text-secondary\">Javascript regular expressions examples.</p>\n          <hr />\n          <p>Using the <code>test</code> method</p>\n          <CodeSnippet codeSnippet={codeSnippet1} />\n          <p>Using the <code>test</code> method with different possibilities</p>\n          <CodeSnippet codeSnippet={codeSnippet2} />\n          <p>Using the <code>test</code> and ignoring case</p>\n          <CodeSnippet codeSnippet={codeSnippet3} />\n          <p>Extract patterns using <code>match</code></p>\n          <CodeSnippet codeSnippet={codeSnippet4} />\n          <p>Extract more than one (1) pattern using <code>match</code></p>\n          <CodeSnippet codeSnippet={codeSnippet5} />\n          <p>Match anything using the wildcard character \"<code>.</code>\"</p>\n          <CodeSnippet codeSnippet={codeSnippet6} />\n          <p>Match single characters with multiple possibilities</p>\n          <CodeSnippet codeSnippet={codeSnippet7} />\n          <p>Using character sets to define a range of characters</p>\n          <CodeSnippet codeSnippet={codeSnippet8} />\n          <p>Match numbers and characters in the same character set</p>\n          <CodeSnippet codeSnippet={codeSnippet9} />\n          <p>Using negated character sets to avoid matching characters</p>\n          <CodeSnippet codeSnippet={codeSnippet10} />\n          <p>Match characters that occur one or more times using \"<code>+</code>\"</p>\n          <CodeSnippet codeSnippet={codeSnippet11} />\n          <p>Match characters that occur zero or more times using \"<code>*</code>\"</p>\n          <CodeSnippet codeSnippet={codeSnippet12} />\n          <p>Match characters with lazy matching (instead of greedy) with \"<code>*?</code>\"</p>\n          <CodeSnippet codeSnippet={codeSnippet13} />\n          <p>Match beginning string patterns with \"<code>^</code>\"</p>\n          <CodeSnippet codeSnippet={codeSnippet14} />\n          <p>Match ending string patterns with \"<code>$</code>\"</p>\n          <CodeSnippet codeSnippet={codeSnippet15} />\n          <p>Match all letters and numbers with \"<code>\\w</code>\"</p>\n          <CodeSnippet codeSnippet={codeSnippet16} />\n          <p>Match characters that aren't letters and numbers with \"<code>\\W</code>\"</p>\n          <CodeSnippet codeSnippet={codeSnippet17} />\n      </>\n    );\n  };\n  \nexport default JSRegexExamples;\n  ","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Container from \"react-bootstrap/Container\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Home from \"./Home\";\nimport ReactExamples from \"./ReactExamples\";\nimport VanillaJSExamples from \"./VanillaJSExamples\";\nimport GitExamples from \"./GitExamples\";\nimport JSRegexExamples from \"./JSRegexExamples\";\n\nconst App = () => {\n  return (\n    <Container>\n      <Router>\n        <Navbar bg=\"light\" variant=\"light\">\n            <Navbar.Brand href=\"\">Neil Gebhard</Navbar.Brand>\n            <Nav className=\"me-auto\">\n              <Nav.Link href=\"\">\n                <Link to=\"/learn-through-examples\">Home</Link>\n              </Nav.Link>\n              <Nav.Link href=\"\">\n                <Link to=\"/learn-through-examples/react\">React</Link>\n              </Nav.Link>\n              <Nav.Link href=\"\">\n                <Link to=\"/learn-through-examples/vanillajs\">Vanilla Js</Link>\n              </Nav.Link>\n              <Nav.Link href=\"\">\n                <Link to=\"/learn-through-examples/git\">Git</Link>\n              </Nav.Link>\n              <Nav.Link href=\"\">\n                <Link to=\"/learn-through-examples/js-regex\">JS Regex</Link>\n              </Nav.Link>\n            </Nav>\n        </Navbar>\n        <Switch>\n          <Route exact path=\"/learn-through-examples\">\n            <Home />\n          </Route>\n          <Route exact path=\"/learn-through-examples/react\">\n            <ReactExamples />\n          </Route>\n          <Route path=\"/learn-through-examples/vanillajs\">\n            <VanillaJSExamples />\n          </Route>\n          <Route path=\"/learn-through-examples/git\">\n            <GitExamples />\n          </Route>\n          <Route path=\"/learn-through-examples/js-regex\">\n            <JSRegexExamples />\n          </Route>\n        </Switch>\n      </Router>\n    </Container>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}